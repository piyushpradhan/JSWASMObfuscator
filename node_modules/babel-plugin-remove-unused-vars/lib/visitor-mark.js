"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var babelTypes = _interopRequireWildcard(require("@babel/types"));

var _common = require("./common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  JSXIdentifier(path) {
    (0, _common.markNodeAsUsed)(path);
  },

  Identifier(path) {
    const parentPath = path.parentPath;

    if (babelTypes.isMemberExpression(parentPath)) {
      // Only process when left-most var in members
      if (!parentPath.node.computed && path.node !== parentPath.node.object) {
        return;
      }
    }

    const statementParent = (0, _common.getParentFunctionOrStatement)(path);

    if (babelTypes.isImportDeclaration(statementParent)) {
      // Handle recursive destructuring here
      if (babelTypes.isImportDefaultSpecifier(parentPath)) {
        (0, _common.markNodeAsTracked)(path.node);
        (0, _common.markNodeAsExternal)(path);
      } else {
        const sideIms = (0, _common.getSideInImportSpecifier)(path);

        if (sideIms === 'right') {
          (0, _common.markNodeAsTracked)(path.node);
          (0, _common.markNodeAsExternal)(path);
        }
      }

      return;
    }

    if (babelTypes.isExpressionStatement(statementParent)) {
      const expressionPath = statementParent.get('expression');

      if (babelTypes.isCallExpression(expressionPath)) {
        (0, _common.markNodeAsUsed)(path);
      } else if (babelTypes.isAssignmentExpression(expressionPath)) {
        const sideAse = (0, _common.getSideInAssignmentExpression)(path, expressionPath);

        if (sideAse === 'right') {
          (0, _common.markNodeAsUsed)(path);
        }
      } else {
        (0, _common.markNodeAsUsed)(path);
      }

      return;
    }

    if (babelTypes.isVariableDeclaration(statementParent)) {
      const sideDecl = (0, _common.getSideInDeclaration)(path, statementParent);

      if (sideDecl === 'left') {
        if (babelTypes.isObjectProperty(parentPath)) {
          if ((0, _common.isObjectPropertyDeclaration)(path, parentPath)) {
            // is a decl
            (0, _common.markNodeAsTracked)(path.node);
          }
        } else if (babelTypes.isVariableDeclarator(parentPath)) {
          (0, _common.markNodeAsTracked)(path.node);
        } else {//
        }

        return;
      }

      if (sideDecl === 'right') {
        (0, _common.markNodeAsUsed)(path);
        return;
      }

      return;
    }

    if (babelTypes.isFunction(statementParent)) {
      // Identifier is a parameter or in function body
      const functionSide = (0, _common.getSideInFunction)(path, statementParent);

      if (functionSide === 'params') {
        if (babelTypes.isFunction(parentPath)) {
          (0, _common.markNodeAsTracked)(path.node);
          (0, _common.markNodeAsExternal)(path);
        } else if (babelTypes.isObjectProperty(parentPath)) {
          if ((0, _common.isObjectPropertyDeclaration)(path, parentPath)) {
            (0, _common.markNodeAsTracked)(path.node);
          }
        }
      } else if (functionSide === 'body') {
        if (babelTypes.isObjectProperty(parentPath)) {
          if ((0, _common.isObjectPropertyDeclaration)(path, parentPath)) {
            (0, _common.markNodeAsUsed)(path);
          }
        } else if (babelTypes.isAssignmentExpression(parentPath)) {
          const sideAse = (0, _common.getSideInAssignmentExpression)(path, parentPath);

          if (sideAse === 'right') {
            (0, _common.markNodeAsUsed)(path);
          }
        } else {
          (0, _common.markNodeAsUsed)(path);
        }
      }

      return;
    }

    (0, _common.markNodeAsUsed)(path);
  }

};
exports.default = _default;