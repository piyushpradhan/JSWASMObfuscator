"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var babelTypes = _interopRequireWildcard(require("@babel/types"));

var _common = require("./common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function removeObjectPropertyDecl({
  path,
  parentPath,
  remove
}) {
  const parentObjPropPath = parentPath;
  const objPropSide = (0, _common.getSideInObjectProperty)(path, parentObjPropPath);

  if (objPropSide === 'right') {
    if (!(0, _common.isNodeUsed)(path.node)) {
      parentPath.remove();
      let currentPath = parentObjPropPath.parentPath;

      for (;;) {
        const currentNode = currentPath.node;

        if (currentNode.properties.length === 0) {
          if (currentPath.parentPath.isObjectProperty()) {
            const grandpaObject = currentPath.parentPath.parentPath.node;
            grandpaObject.properties = grandpaObject.properties.filter(item => item !== currentPath.parentPath.node);
            currentPath = currentPath.parentPath.parentPath;
          } else {
            if (currentPath.parentPath.isVariableDeclarator()) {
              // No properties and parent path is root. remove the entire thing.
              remove();
            } else if (currentPath.parentPath.isFunction()) {
              // ObjectPattern is as a parameter in a function
              remove();
            }

            break;
          }
        } else {
          break;
        }
      }
    }
  }
}

var _default = {
  Identifier(path) {
    const parentPath = path.parentPath;

    if (babelTypes.isMemberExpression(parentPath)) {
      return;
    }

    const statementParent = (0, _common.getParentFunctionOrStatement)(path);

    if (!statementParent) {
      return;
    }

    if (babelTypes.isImportDeclaration(statementParent)) {
      if (babelTypes.isImportDefaultSpecifier(parentPath)) {
        if (!(0, _common.isNodeUsed)(path.node)) {
          if (statementParent.node.specifiers.length === 1) {
            statementParent.remove();
          } else {
            parentPath.remove();
          }
        }

        return;
      } else {
        const sideIms = (0, _common.getSideInImportSpecifier)(path);

        if (sideIms === 'right') {
          if (!(0, _common.isNodeUsed)(path.node)) {
            parentPath.remove();

            if (!statementParent.node.specifiers.length) {
              statementParent.remove();
            }
          }
        }
      }

      return;
    }

    if (babelTypes.isExpressionStatement(statementParent)) {
      const expressionPath = statementParent.get('expression');

      if (babelTypes.isCallExpression(expressionPath)) {
        // - mark as used
        return;
      } else if (babelTypes.isAssignmentExpression(expressionPath)) {//
      }

      return;
    }

    if (babelTypes.isVariableDeclaration(statementParent)) {
      const sideDecl = (0, _common.getSideInDeclaration)(path, statementParent);

      if (sideDecl === 'left') {
        if (babelTypes.isObjectProperty(parentPath)) {
          removeObjectPropertyDecl({
            path,
            parentPath,

            remove() {
              statementParent.remove();
            }

          });
        } else if (babelTypes.isVariableDeclarator(parentPath)) {
          if (!(0, _common.isNodeUsed)(path.node)) {
            statementParent.remove();
          }
        } else {}
      } // Ignore right side here, remove the entire statement if left is unused


      return;
    }

    if (babelTypes.isFunction(statementParent)) {
      // Identifier is a parameter or in function body
      if (babelTypes.isFunction(parentPath)) {
        // We have a simple param identifier
        // Only remove if last param
        const parentNode = parentPath.node;

        if (parentNode.params[parentNode.params.length - 1] === path.node && !(0, _common.isNodeUsed)(path.node)) {
          path.remove();
        }
      }

      if (babelTypes.isObjectProperty(parentPath)) {
        const objPropSide = (0, _common.getSideInObjectProperty)(path, parentPath);

        if (objPropSide === 'right' && !(0, _common.isNodeUsed)(path.node)) {
          const paramParent = parentPath.find(path => // We found an object pattern and it's a direct discendent of this function aka the param.
          path.isObjectPattern() && path.parentPath.node === statementParent.node || // We reached the end of the function decl
          path.node === statementParent.node);

          if (paramParent && paramParent.isObjectPattern()) {
            removeObjectPropertyDecl({
              path,
              parentPath,

              remove() {
                paramParent.replaceWith(path.scope.generateUidIdentifier('unusedParam'));
              }

            });
          }
        }
      }

      return;
    }
  }

};
exports.default = _default;