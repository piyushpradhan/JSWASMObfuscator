"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var babelTypes = _interopRequireWildcard(require("@babel/types"));

var _common = require("./common");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var _default = {
  Identifier(path) {
    const parentPath = path.parentPath;

    if (babelTypes.isMemberExpression(parentPath)) {
      // Only process when left-most var in members
      if (!parentPath.node.computed && path.node !== parentPath.node.object) {
        return;
      }
    }

    const statementParent = (0, _common.getParentFunctionOrStatement)(path);

    if (babelTypes.isImportDeclaration(statementParent)) {
      // Handle recursive destructuring here
      if (babelTypes.isImportDefaultSpecifier(parentPath)) {// - mark as tracked
      }

      return;
    }

    if (babelTypes.isExpressionStatement(statementParent)) {
      const expressionPath = statementParent.get('expression');

      if (babelTypes.isCallExpression(expressionPath)) {// - mark as used
      } else if (babelTypes.isAssignmentExpression(expressionPath)) {
        const sideAse = (0, _common.getSideInAssignmentExpression)(path, expressionPath);

        if (sideAse === 'left') {
          if (!(0, _common.isNodeBindingUsed)(path) && !(0, _common.isNodeBindingExternal)(path)) {
            if (babelTypes.isAssignmentExpression(expressionPath.node.right)) {
              expressionPath.replaceWith(expressionPath.node.right);
            } else {
              expressionPath.remove();
            }
          }
        }
      }

      return;
    }

    if (babelTypes.isVariableDeclaration(statementParent)) {
      const sideDecl = (0, _common.getSideInDeclaration)(path, statementParent);

      if (sideDecl === 'left') {
        if (babelTypes.isObjectProperty(parentPath)) {
          const parentObjPropPath = parentPath;
          const objPropSide = (0, _common.getSideInObjectProperty)(path, parentObjPropPath);

          if (objPropSide === 'right') {// is a decl
            // - mark as tracked
          }
        }
      } // Ignore right here, remove the entire statement if left is unused


      return;
    }

    if (babelTypes.isFunction(statementParent)) {
      // Identifier is a parameter or in function body
      if (babelTypes.isFunction(parentPath)) {// We have a simple param identifier
        // - mark as tracked
      } else if (babelTypes.isObjectProperty(parentPath)) {
        const objPropSide = (0, _common.getSideInObjectProperty)(path, parentPath);

        if (objPropSide === 'right') {// - mark as tracked
        }
      } else if (babelTypes.isAssignmentExpression(parentPath)) {
        const sideAse = (0, _common.getSideInAssignmentExpression)(path, parentPath);

        if (sideAse === 'right') {// - mark as tracked
        } else if (sideAse === 'left') {
          if (!(0, _common.isNodeBindingUsed)(path)) {
            if (babelTypes.isAssignmentExpression(parentPath.parentPath) || babelTypes.isAssignmentExpression(parentPath.node.right)) {
              parentPath.replaceWith(parentPath.node.right);
            } else {
              parentPath.remove();
            }
          }
        }
      }

      return;
    }
  }

};
exports.default = _default;